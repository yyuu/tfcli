#!/usr/bin/env bash

set -euo pipefail

[[ -z "${DEBUG:-}" ]] || set -x

unset arg_table

arg_id_key="id"

while [[ $# -gt 0 ]]; do
  case "${1:-}" in
  "--" )
    break
    ;;
  "--complete" )
    exit 0
    ;;
  "--debug" )
    set -x
    ;;
  "--help" )
    exit 0
    ;;
  "--id-key" | "--id-key="* ) # option: JSON field name to be used for primary key
    if [[ "$1" == *"="* ]]; then
      arg_id_key="${1#*=}"
    else
      arg_id_key="${2:-}"
      shift 1
    fi
    ;;
  "--table" | "--table="* ) # option: table name
    if [[ "$1" == *"="* ]]; then
      arg_table="${1#*=}"
    else
      arg_table="${2:-}"
      shift 1
    fi
    ;;
  * )
    tfc-helper-logger --level=error "${0##*/}: unrecognized option: ${1:-}"
    exit 1
    ;;
  esac
  shift 1
done

if [[ -z "${arg_table:-}" ]]; then
  tfc-helper-logger --level=error "${0##*/}: missing required option: --table"
  exit 1
fi

TMPDIR="$(mktemp -d)"

on_exit() {
  rm -rf "${TMPDIR}"
}

trap on_exit EXIT

data="$(mktemp "${TMPDIR}/data.XXXXXX")"

if jq '.' > "${data}"; then
  jq --arg PROGRAM_NAME "${0##*/}" --arg id_key "${arg_id_key}" \
    'if (.data | type) == "array" then
      .data
    elif (.data | type) == "object" then
      [.data]
    else
      error("\($PROGRAM_NAME): unsupported data type: \(.data | type)")
    end | map(. * {
      _Id: (.[$id_key] | tostring),
      _CreatedAt: now,
      _UpdatedAt: now,
      _DeletedAt: -1
    })' < "${data}" | \
      json2sqlite3 \
        --primary-key-column="_Id:TEXT" \
        --created-column="_CreatedAt:NUMERIC" \
        --updated-column="_UpdatedAt:NUMERIC" \
        --deleted-column="_DeletedAt:NUMERIC" \
        --preserve-created \
        "${TFCLI_DBFILE:-${HOME}/.cache/tfcli/tfcli.sqlite}" "${arg_table}"

  # behave as write-through cache
  jq '.' "${data}"
else
  tfc-helper-logger --level=error "${0##*/}: invalid JSON"
  exit 1
fi
